t eaf1ce1fe147c53035368f7bafcb759a9ba3c17e
Author: confab <blooough@gmail.com>
Date:   Mon Aug 1 10:33:10 2011 -0700

    revamped config/config.py

diff --git a/pythonforumide/Ide_Config.cfg b/pythonforumide/Ide_Config.cfg
index ffc8eaa..2697499 100644
--- a/pythonforumide/Ide_Config.cfg
+++ b/pythonforumide/Ide_Config.cfg
@@ -1,5 +1,5 @@
 [ide]
-usetab = 0
+usetab = False
 mainframe.height = 600
 mainframe.width = 600
 indent = 4
diff --git a/pythonforumide/config/Ide_Config.cfg b/pythonforumide/config/Ide_Config.cfg
index ffc8eaa..2697499 100644
--- a/pythonforumide/config/Ide_Config.cfg
+++ b/pythonforumide/config/Ide_Config.cfg
@@ -1,5 +1,5 @@
 [ide]
-usetab = 0
+usetab = False
 mainframe.height = 600
 mainframe.width = 600
 indent = 4
diff --git a/pythonforumide/config/config.py b/pythonforumide/config/config.py
index 8c76ea1..e5c508f 100644
--- a/pythonforumide/config/config.py
+++ b/pythonforumide/config/config.py
@@ -15,17 +15,21 @@ except ImportError:
     import ConfigParser #Ugly config file :(
     has_yaml = False

-def config_file(profile):
-    """Returns the name of the configuration file. It does not guarantee existence.
-    Side effect: Tells the user if can't load the configuration file if it is not supported.
+def file_config(profile):
+    """
+    Returns the name of the configuration file.
+    It does not guarantee existence.
+    Side effect:
+    Tells the user if can't load the configuration file if it is not supported.
     """

     # We will need some fuzzy logic to accomplish this
-    (profile, ext) = os.path.splitext(profile)
-    yaml_exists = os.path.exists(profile + ".yaml")
-    cfg_exists = os.path.exists(profile + ".cfg")
+    profile, ext = os.path.splitext(profile)
+    yaml_exists = os.path.exists(''.join((profile, ".yaml")))
+    cfg_exists = os.path.exists(''.join((profile, ".cfg")))

-    # If no extension could be found, guess what configuration type is likely to be preferred
+    # If no extension could be found,
+    # guess what configuration type is likely to be preferred.
     if not ext:
         if yaml_exists or (has_yaml and not cfg_exists):
             ext = ".yaml"
@@ -34,14 +38,16 @@ def config_file(profile):

     # We can't load yaml if it doesn't exist
     if ext == ".yaml" and not has_yaml:
-        print("yaml configuration could not be loaded because python-yaml is not installed.")
+        print("yaml configuration could not be loaded",
+              "because python-yaml is not installed.")
         ext = ".cfg"

-    return profile + ext
+    return ''.join((profile, ext))

 def load_config(configfile):
     """Loads a config file"""
-    (profile, ext) = os.path.splitext(configfile)
+
+    profile, ext = os.path.splitext(configfile)
     if ext == ".yaml":
         return _BeautifulConfig(profile)
     else:
@@ -49,10 +55,14 @@ def load_config(configfile):

 class _BeautifulConfig(object):
     """This is the config object if we can import yaml."""
+
     def __init__(self, profile):
-        """Load the yaml config from file,
-        if this fails write an empty new one."""
-        filename = profile + ".yaml"
+        """
+        Load the yaml config from file,
+        if this fails write an empty new one.
+        """
+
+        filename = ''.join((profile, ".yaml"))

         try:
             self.config = yaml.load(open(filename))
@@ -60,116 +70,139 @@ class _BeautifulConfig(object):
             #Raise a config warning error here?
             self.config = {}

-        self.file = open(filename,'w')
-
+        self.file_config = open(filename, 'w')
+
     def __setitem__(self, option, value):
         """Set an option to a value inside the config, does not write."""
+
         self.config[option] = value
-
+
     def __getitem__(self, option):
-        """Gets the option from the config, if the option is not there
-        returns None"""
+        """
+        Gets the option from the config.
+        Return None, if the option is not there
+        """
+
         return self.config.get(option, None)

     def set_default(self, option, value):
+
         self.config.set_default(option, value)

     def save(self):
         """Writes the config as yaml out to the config file."""
-        yaml.dump(self.config, self.file)
+
+        yaml.dump(self.config, self.file_config)

 class _UglyConfig(object):
-    """This is the config object created if we can't use YAML and have to
-    rely on ConfigParser."""
+    """
+    This is the config object created if we can't use YAML and have to
+    rely on ConfigParser.
+    """
+
     def __init__(self, profile):
-        filename = profile + ".cfg"
-        filename= profile

+        filename = ''.join((profile, ".cfg"))
+        filename = profile
         self.config = ConfigParser.ConfigParser()
-        try:
-            self.config.read(filename)
-        except IOError: # <<< Exception will never be trown (RTFM, noob!)
-            pass #Raise a config warning error here?
-            self.config.add_section('ide')
+        self.config.read(filename)

         if not self.config.has_section('ide'):
             self.config.add_section('ide')

-        self.file = open(filename,'w')
+        self.file_config = open(filename,'w')

     def __setitem__(self, option, value):
         """Set the value to the option inside the default section."""
-        self.config.set('ide',option, value)
-
+
+        self.config.set('ide', option, value)
+
     def __getitem__(self, option):
         """Return the values to the option given, or return None"""
+
         try:
             return self.config.get('ide', option)
         except ConfigParser.NoOptionError:
             return None

     def set_default(self, option, value):
+
         if not self.config.has_option('ide', option):
             self[option] = value
-
+
     def save(self):
         """Write config to file."""
-        self.config.write(self.file)
+
+        self.config.write(self.file_config)


 #If we have yaml then the ConfigObject will point to the cooler config object
 if has_yaml:
     Config = _BeautifulConfig
-else: # Otherwise we point to the ugly one
+# Otherwise we point to the ugly one
+else:
     Config = _UglyConfig
 #This way the importers use the config the same way, same api but under the
 #hood they are different.

-class Ide_config(object):
-    def __init__(self, filepath= "", filename= "Ide_Config"):
+
+class IdeConfig(object):
+
+    def __init__(self, filepath="", filename="Ide_Config"):
+
         if not filepath:
-            filepath= os.path.dirname(__file__)
+            filepath = os.path.dirname(__file__)
         self._filepath = filepath
         self._filename = filename
-        self._fullpath= None
-        self._data= {}
+        self._fullpath = None
+        self._data = {}
         self._get_file_fullpath()
         self._get_defaults()
-
+
     def _get_file_fullpath(self):
+
         if has_yaml:
-            ext= ".yaml"
+            ext = ".yaml"
         else:
-            ext= ".cfg"
-        self._fullpath= os.path.join(self._filepath, self._filename)+ext
-        if not os.path.exists(self._fullpath):
-             a= file(self._fullpath, "w")
-             a.close()
-        print ("Config useing filepath: %s" % (self._fullpath))
-
+            ext = ".cfg"
+
+        _temp_path = os.path.join(self._filepath, self._filename)
+        self._fullpath = ''.join((_temp_path, ext))
+
+        with open(self._fullpath, "a") as _:
+            # Opens file as append to ensure safe creation of the file.
+            pass
+
+        print ("Config using filepath: %s" % (self._fullpath))
+
     def _get_defaults(self):
-        confile= Config(self._fullpath)
-        self._data["indent"]= confile["indent"] or 4
-        self._data["usetab"]= confile["usetab"] or 0
+
+        confile = Config(self._fullpath)
+        self._data["indent"] = confile["indent"] or 4
+        self._data["usetab"] = confile["usetab"] or False
         self._data["MainFrame.Height"] = confile["MainFrame.Height"] or 600
         self._data["MainFrame.Width"] = confile["MainFrame.Width"] or 600
-        confile.file.close()
-
+        confile.file_config.close()
+
     def __setitem__(self, key, value):
-        self._data[key]= value
-
+
+        self._data[key] = value
+
     def __getitem__(self, key):
+
         return self._data[key]
-
+
     def update_configfile(self):
-        confile= Config(self._fullpath)
+
+        confile = Config(self._fullpath)
         for key, value in self._data.iteritems():
-            confile[key]= value
+            confile[key] = value
+
         confile.save()
-        confile.file.close()
+        confile.file_config.close()

 if __name__ == '__main__':
-    ide_config= Ide_config()
-    print (ide_config["indent"])
+    ide_config = IdeConfig(config_style=Config)
+    print(ide_config["indent"])
     ide_config.update_configfile()
-
+
diff --git a/pythonforumide/gui_lib/ide_test_app.py b/pythonforumide/gui_lib/ide_test_app.py
index e30f2a7..405b1ff 100644
--- a/pythonforumide/gui_lib/ide_test_app.py
+++ b/pythonforumide/gui_lib/ide_test_app.py
@@ -1,11 +1,11 @@
 """
 Created on 31 Jul 2011

-@author: Main
+@author: Main, confab
 """

 import wx
-from pythonforumide.config.config import Ide_config
+from pythonforumide.config.config import IdeConfig

 class Wx_App(wx.App):
     def __init__(self, *args, **kwargs):
@@ -15,7 +15,7 @@ class Wx_App(wx.App):

     def _create_config(self):
         """Set up config"""
-        self.config= Ide_config()
+        self.config= IdeConfig()

     def OnExit(self):
         """Handles the frame closing function"""
diff --git a/pythonforumide/wx_app.py b/pythonforumide/wx_app.py
index 2b6021f..a87361a 100644
--- a/pythonforumide/wx_app.py
+++ b/pythonforumide/wx_app.py
@@ -1,16 +1,15 @@
 """
 Created on 31 Jul 2011

-@author: D.W., david
+@author: D.W., david, confab
 @reviewer: david
 """

 import wx
 import gui_lib.ide_mainframe as ide_mainframe
 import gui_lib.ide_mainframe_events as ide_mainframe_events
-from config.config import Ide_config
+from config.config import IdeConfig

-#import config.config.Ide_config as Ide_config
 from twisted.internet import wxreactor
 wxreactor.install()

@@ -31,7 +30,7 @@ class Wx_App(wx.App):

     def _create_config(self):
         """Set up config"""
-        self.config = Ide_config()
+        self.config = IdeConfig()

     def _create_port(self):
         """Creates a free port"""
